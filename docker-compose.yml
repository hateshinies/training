version: '3.8'
services:

  postgres:
    image: postgres:13.18
    container_name: postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    environment:
      - POSTGRES_USER=credentials
      - POSTGRES_PASSWORD=credentials
      - POSTGRES_DB=training
    volumes:
      - 'postgres_data:/postgres/data'

  prometheus:
    image: prom/prometheus:v3.0.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:11.3.1
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Traefik Reverse Proxy for routing various applications.
  ### NOTE: Make sure to point *.docker.localhost to your localhost/IP-address
  reverse-proxy:
    image: traefik:v2.10.5 # The official Traefik docker image
    container_name: traefik
    restart: unless-stopped
    labels:
      - traefik.http.routers.proxy.rule=Host(`proxy.docker.localhost`)
      - traefik.http.routers.proxy.tls=false
      - traefik.http.services.proxy.loadbalancer.server.port=8081
      - traefik.http.routers.proxy.service=proxy
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events

  redis:
    image: bitnami/redis:7.2.3
    restart: unless-stopped
    labels:
      - traefik.enabled=false
    environment:
      - REDIS_PASSWORD=SuperSecretRedisPassword
    ports:
      - "6379:6379"
    volumes:
      - 'redis_data:/bitnami/redis/data'

  spring-chat-jvm:
    image: rawsanj/spring-redis-websocket:3.2.0-jvm
    restart: unless-stopped
    labels:
      - traefik.http.routers.chat.rule=PathPrefix(`/`) || Host(`chat.docker.localhost`) # PathPrefix(`/`) rule is helpful when running on play-with-docker.com to access chat app directly on port 80
      - traefik.http.services.chat-service.loadbalancer.server.port=8081
    environment:
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PASSWORD=SuperSecretRedisPassword
    ports:
      - "8080"
    depends_on:
      - redis
    deploy:
      replicas: 1

  spring-chat-native:
    image: rawsanj/spring-redis-websocket:3.2.0-native
    restart: unless-stopped
    labels:
      - traefik.http.routers.chat.rule=PathPrefix(`/`) || Host(`chat.docker.localhost`) # PathPrefix(`/`) rule is helpful when running on play-with-docker.com to access chat app directly on port 80
      - traefik.http.services.chat-service.loadbalancer.server.port=8081
    environment:
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PASSWORD=SuperSecretRedisPassword
    ports:
      - "8080"
    depends_on:
      - redis
    deploy:
      replicas: 1

#  training-app:
#    build:
#      dockerfile: Dockerfile
##    image:  docker.io/library/greatestsasha.training
#    restart: unless-stopped
#    environment:
#      - SPRING_PROFILES_ACTIVE=local
#    ports:
#      - "8081:8081"
#    depends_on:
#      - redis
#      - minio
#      - mongo

  mongo:
    image: mongo:8.0.3
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongouser
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=mongodb
    ports:
      - "27017:27017"
    volumes:
      - 'mongo-data:/data/db'

  minio:
    image: bitnami/minio:2024.11.7
    restart: unless-stopped
    volumes:
      - 'minio_data:/data'
    environment:
      - MINIO_ROOT_USER=minio_user
      - MINIO_ROOT_PASSWORD=minio_password
      - MINIO_DEFAULT_BUCKETS=bucketdefault
    networks:
      - minionetwork
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  redis_data:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  mongo-data:
    driver: local


networks:
  minionetwork:
    driver: bridge